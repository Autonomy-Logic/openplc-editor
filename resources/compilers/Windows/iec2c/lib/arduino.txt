(*
 *  This file is part of OpenPLC - an open source Programmable
 *  Logic Controller compliant with IEC 61131-3
 *
 *  Copyright (C) 2021  Thiago Alves
 *
 * See COPYING and COPYING.LESSER files for copyright details.
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 3 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 * 
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307
 * USA
 *
 * This code is made available on the understanding that it will not be
 * used in safety-critical situations without a full and competent review.
 *)



(*
 * An IEC 61131-3 compiler.
 *
 * Based on the
 * FINAL DRAFT - IEC 61131-3, 2nd Ed. (2001-12-10)
 *
 *)


(*
 * This is a dummy implementation of this block since
 * its code is actually written in C, not ST
 *
 * READ_DS18B20
 * -------------
 *)

FUNCTION_BLOCK DS18B20
  VAR_INPUT
    PIN : SINT;
  END_VAR
  VAR_OUTPUT
    OUT : REAL;
  END_VAR
  OUT := 0.0;
END_FUNCTION_BLOCK

FUNCTION_BLOCK DS18B20_2_OUT
  VAR_INPUT
    PIN : SINT;
  END_VAR
  VAR_OUTPUT
    OUT_0 : REAL;
    OUT_1 : REAL;
  END_VAR
  OUT_0 := 0.0;
  OUT_1 := 0.0;
END_FUNCTION_BLOCK

FUNCTION_BLOCK DS18B20_3_OUT
  VAR_INPUT
    PIN : SINT;
  END_VAR
  VAR_OUTPUT
    OUT_0 : REAL;
    OUT_1 : REAL;
    OUT_2 : REAL;
  END_VAR
  OUT_0 := 0.0;
  OUT_1 := 0.0;
  OUT_2 := 0.0;
END_FUNCTION_BLOCK

FUNCTION_BLOCK DS18B20_4_OUT
  VAR_INPUT
    PIN : SINT;
  END_VAR
  VAR_OUTPUT
    OUT_0 : REAL;
    OUT_1 : REAL;
    OUT_2 : REAL;
    OUT_3 : REAL;
  END_VAR
  OUT_0 := 0.0;
  OUT_1 := 0.0;
  OUT_2 := 0.0;
  OUT_3 := 0.0;
END_FUNCTION_BLOCK

FUNCTION_BLOCK DS18B20_5_OUT
  VAR_INPUT
    PIN : SINT;
  END_VAR
  VAR_OUTPUT
    OUT_0 : REAL;
    OUT_1 : REAL;
    OUT_2 : REAL;
    OUT_3 : REAL;
    OUT_4 : REAL;
  END_VAR
  OUT_0 := 0.0;
  OUT_1 := 0.0;
  OUT_2 := 0.0;
  OUT_3 := 0.0;
  OUT_4 := 0.0;
END_FUNCTION_BLOCK

(*
 * This is a dummy implementation of this block since
 * its code is actually written in C, not ST
 *
 * CLOUD_xxx
 * -------------
 *)
 
FUNCTION_BLOCK CLOUD_ADD_BOOL
  VAR_INPUT
    VAR_NAME : STRING;
    BOOL_VAR : BOOL;
  END_VAR
  VAR_OUTPUT
    SUCCESS : BOOL;
  END_VAR
  SUCCESS := 0;
END_FUNCTION_BLOCK

FUNCTION_BLOCK CLOUD_ADD_DINT
  VAR_INPUT
    VAR_NAME : STRING;
    DINT_VAR : DINT;
  END_VAR
  VAR_OUTPUT
    SUCCESS : BOOL;
  END_VAR
  SUCCESS := 0;
END_FUNCTION_BLOCK

FUNCTION_BLOCK CLOUD_ADD_REAL
  VAR_INPUT
    VAR_NAME : STRING;
    REAL_VAR : REAL;
  END_VAR
  VAR_OUTPUT
    SUCCESS : BOOL;
  END_VAR
  SUCCESS := 0;
END_FUNCTION_BLOCK

FUNCTION_BLOCK CLOUD_BEGIN
  VAR_INPUT
    THING_ID : STRING;
    SSID : STRING;
    PASS : STRING;
  END_VAR
  VAR_OUTPUT
    SUCCESS : BOOL;
  END_VAR
  SUCCESS := 0;
END_FUNCTION_BLOCK

FUNCTION_BLOCK PWM_CONTROLLER
VAR_INPUT
CHANNEL : SINT;
FREQ : REAL;
DUTY : REAL;
END_VAR
VAR_OUTPUT
SUCCESS : BOOL;
END_VAR
VAR
internal_ch : SINT;
internal_freq : REAL;
internal_duty : REAL;
END_VAR

  IF CHANNEL < 1 THEN
    SUCCESS := FALSE;
    RETURN;
  END_IF;


  IF (CHANNEL <> internal_ch) OR (FREQ <> internal_freq) OR (DUTY <> internal_duty) THEN
    SUCCESS := TRUE;
  END_IF;

END_FUNCTION_BLOCK

FUNCTION_BLOCK ARDUINOCAN_CONF
  VAR_INPUT
    EN_PIN : SINT;
    BR  : LINT;
  END_VAR
    VAR_OUTPUT
    DONE : BOOL;
  END_VAR
  DONE := 0;
END_FUNCTION_BLOCK

FUNCTION_BLOCK ARDUINOCAN_WRITE
  VAR_INPUT
    ID : DWORD;
    D0 : USINT;
    D1 : USINT;
    D2 : USINT;
    D3 : USINT;
    D4 : USINT;
    D5 : USINT;
    D6 : USINT;
    D7 : USINT;
  END_VAR
    VAR_OUTPUT
    DONE : BOOL;
  END_VAR
  DONE := 0;
END_FUNCTION_BLOCK

FUNCTION_BLOCK ARDUINOCAN_WRITE_WORD
  VAR_INPUT
    ID :  DWORD;
    DATA :LWORD;
  END_VAR
    VAR_OUTPUT
    DONE : BOOL;
  END_VAR
  DONE := 0;
END_FUNCTION_BLOCK


FUNCTION_BLOCK ARDUINOCAN_READ
  VAR_OUTPUT
    DATA : LWORD;
  END_VAR
  DATA := 0;
END_FUNCTION_BLOCK
