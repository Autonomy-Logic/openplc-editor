import { useOpenPLCStore } from '@root/renderer/store'
import { RungState } from '@root/renderer/store/slices'
import type { CoordinateExtent, Node, OnConnect, OnEdgesChange, OnNodesChange, ReactFlowInstance } from '@xyflow/react'
import { addEdge, applyEdgeChanges, applyNodeChanges, getNodesBounds, Panel } from '@xyflow/react'
import { useCallback, useEffect, useState } from 'react'

import { FlowPanel } from '../../_atoms/react-flow'

type RungBodyProps = {
  rung: RungState
}

export const RungBody = ({ rung }: RungBodyProps) => {
  const { flowActions } = useOpenPLCStore()
  const [rungLocal, setRungLocal] = useState<RungState>(rung)
  const [reactFlowInstance, setReactFlowInstance] = useState<ReactFlowInstance | null>(null)

  /**
   * Default flow panel extent:
   * width: 1500
   * height: 200
   * -- Which means:
   * minX: 0    | minY: 0
   * maxX: 1500 | maxY: 200
   */
  const defaultFlowPanelExtent: [number, number] = [1500, 200]
  const [flowPanelExtent, setFlowPanelExtent] = useState<CoordinateExtent>([[0, 0], defaultFlowPanelExtent])

  /**
   * Update flow panel extent based on the bounds of the nodes
   * To make the getNodesBounds function work, the nodes must have width and height properties set in the node data
   * This useEffect will run every time the nodes array changes (i.e. when a node is added or removed)
   */
  useEffect(() => {
    const zeroPositionNode: Node = {
      id: '-1',
      position: { x: 0, y: 0 },
      data: { label: 'Node 0' },
      measured: { width: 150, height: 40 },
    }
    const bounds = getNodesBounds([zeroPositionNode, ...rungLocal.nodes])
    const [defaultWidth, defaultHeight] = defaultFlowPanelExtent

    // If the bounds are less than the default extent, set the panel extent to the default extent
    if (bounds.width < defaultWidth) bounds.width = defaultWidth
    if (bounds.height < defaultHeight) bounds.height = defaultHeight

    setFlowPanelExtent([
      [0, 0],
      [bounds.width, bounds.height],
    ])
  }, [rungLocal.nodes.length])

  const handleAddNode = () => {
    const lastNode = rungLocal.nodes[rungLocal.nodes.length - 1]
    const newNode: Node = {
      id: `${rungLocal.nodes.length + 1}`,
      position: { x: lastNode.position.x + 150, y: lastNode.position.y + 60 },
      data: { label: `Node ${rungLocal.nodes.length + 1}` },
      measured: { width: 150, height: 40 },
    }
    setRungLocal((rung) => ({
      ...rung,
      nodes: [...rungLocal.nodes, newNode],
    }))
    flowActions.setNodes({ rungId: rungLocal.id, nodes: [...rungLocal.nodes, newNode] })
  }

  const handleRemoveNode = () => {
    setRungLocal((rung) => ({
      ...rung,
      nodes: rungLocal.nodes.filter((node) => node.id !== `${rungLocal.nodes.length}`),
    }))
    flowActions.setNodes({
      rungId: rungLocal.id,
      nodes: rungLocal.nodes.filter((node) => node.id !== `${rungLocal.nodes.length}`),
    })
  }

  const onNodesChange: OnNodesChange<Node> = useCallback(
    (changes) => {
      setRungLocal((rung) => ({
        ...rung,
        nodes: applyNodeChanges(changes, rung.nodes),
      }))
    },
    [setRungLocal],
  )

  const onNodeDragStop = () => {
    if (reactFlowInstance) {
      const flow = reactFlowInstance.toObject()
      flowActions.setNodes({ rungId: rungLocal.id, nodes: flow.nodes })
      flowActions.setEdges({ rungId: rungLocal.id, edges: flow.edges })
    }
  }

  const onEdgesChange: OnEdgesChange = useCallback(
    (changes) => {
      setRungLocal((rung) => ({
        ...rung,
        edges: applyEdgeChanges(changes, rung.edges),
      }))
      flowActions.onEdgesChange({ rungId: rungLocal.id, changes })
    },
    [setRungLocal, flowActions],
  )

  const onConnect: OnConnect = useCallback(
    (connection) => {
      setRungLocal((rung) => ({
        ...rung,
        edges: addEdge(connection, rung.edges),
      }))
      flowActions.onConnect({ rungId: rungLocal.id, changes: connection })
    },
    [setRungLocal, flowActions],
  )

  return (
    <div className='h-fit w-full rounded-b-lg border border-t-0 p-1 dark:border-neutral-800'>
      <div aria-label='Rung body' className='h-full w-full overflow-x-auto'>
        <div
          style={{
            minHeight: '208px',
            height: flowPanelExtent[1][1] + 8,
            minWidth: '100%',
            width: flowPanelExtent[1][0] + 8,
          }}
        >
          <FlowPanel
            viewportConfig={{
              nodes: rungLocal.nodes,
              edges: rungLocal.edges,
              onInit: setReactFlowInstance,
              onNodesChange: onNodesChange,
              onNodeDragStop: onNodeDragStop,
              onEdgesChange: onEdgesChange,
              onConnect: onConnect,

              nodeExtent: flowPanelExtent,
              translateExtent: flowPanelExtent,
              panActivationKeyCode: null,
              panOnDrag: false,
              panOnScroll: false,
              zoomActivationKeyCode: null,
              zoomOnDoubleClick: false,
              zoomOnPinch: false,
              zoomOnScroll: false,
              preventScrolling: false,
            }}
          >
            <Panel position='bottom-left'>
              <button onClick={handleAddNode}>Add Node</button>
            </Panel>
            <Panel position='bottom-right'>
              <button onClick={handleRemoveNode}>Remove Node</button>
            </Panel>
          </FlowPanel>
        </div>
      </div>
    </div>
  )
}
